{"version":3,"sources":["assets/img/image.svg","GlobalStyle.js","components/MessageInput.jsx","contexts/messages.jsx","components/Message.jsx","components/Image.jsx","components/MessagesView.jsx","components/TextInput.jsx","components/ChatView.jsx","components/DualChatView.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalStyle","createGlobalStyle","Container","styled","div","TextArea","textarea","Right","Button","button","ChatView","onSend","onUpload","useState","value","setValue","ref","useRef","file","setFile","useEffect","reader","FileReader","onloadend","e","target","result","readAsDataURL","placeholder","onChange","style","display","type","files","className","onClick","current","click","src","imgImage","alt","MessagesContext","React","createContext","messages","publish","MessagesProvider","children","useReducer","state","action","newState","concat","payload","timestamp","Date","sort","a","b","console","debug","name","msg","dispatch","Provider","Time","Name","Msg","Line","Message","message","isSender","moment","timstamp","format","split","map","m","Img","img","Image","MessagesView","who","useContext","scrollTo","scrollHeight","idx","key","Input","input","Label","TextInput","label","displayName","setDisplayName","MessageInput","val","dataUrl","DualChatView","Canvas","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75adbe69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.d5177549.svg\";","import { createGlobalStyle } from 'styled-components/macro';\n\nconst GlobalStyle = createGlobalStyle`\n  /**\n   * Reset\n   *  http://meyerweb.com/eric/tools/css/reset/\n   * v2.0 | 20110126\n   * License: none (public domain)\n   */\n\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n\n  /**\n   * Fonts\n   */\n  @import url('https://fonts.googleapis.com/css?family=Roboto:400,700|Titillium+Web:300,400,700');\n\n  body {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  /**\n   * Defaults\n   */\n  body .root {\n    width: 100%;\n    box-sizing: border-box;\n  }\n\n  /**\n   * Root font size\n   */\n  html {\n    font-family: Roboto, sans-serif;\n    font-size: 16px;\n    line-height: 1.6em;\n  }\n\n  /**\n   * Fill the window\n   */\n  html {\n    position: relative;\n    height: 100%;\n  }\n\n  body {\n    position: relative;\n    width: 100%;\n    min-height: 100%;\n\n    background-color: white;\n    box-sizing: border-box;\n    font-family: Roboto;\n    font-size: 16px;\n  }\n\n  #reta {\n    position: relative;\n    width: 100%;\n    height: 100%;\n  }\n\n  a {\n    &:link {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default GlobalStyle;\n","import React, { useRef, useState, useEffect } from 'react';\nimport styled from 'styled-components/macro';\nimport imgImage from '../assets/img/image.svg';\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  flex: 0 0 75px;\n  padding-top: 16px;\n  box-sizing: border-box;\n`;\n\nconst TextArea = styled.textarea`\n  flex: 1 1 200px;\n  height: 100%;\n  line-height: 1.61em;\n  border: 1px solid #499c4d;\n  border-radius: 6px;\n  padding: 12px;\n  box-sizing: border-box;\n  background-color: black;\n  color: #6ef173;\n  font-weight: bold;\n  font-size: 16px;\n  outline: none;\n\n  &::placeholder {\n    font-style: italic;\n    color: #316734;\n    font-weight: normal;\n  }\n`;\n\nconst Right = styled.div`\n  display: flex;\n  flex: 0 0 50px;\n  height: 100%;\n  padding-left: 12px;\n  box-sizing: border-box;\n`;\n\nconst Button = styled.button`\n  height: 100%;\n  border: 1px solid #499c4d;\n  border-radius: 6px;\n  padding: 6px;\n  box-sizing: border-box;\n  background-color: #499c4d;\n  color: black;\n  font-weight: bold;\n  font-size: 16px;\n  outline: none;\n  margin-right: 8px;\n\n  &.blue {\n    background-color: #00bcd4;\n\n    &:hover {\n      background-color: #05e1fd;\n    }\n  }\n\n  &:hover {\n    background-color: #6ef173;\n  }\n\n  &:last-child {\n    margin-right: 0px;\n  }\n`;\n\nconst ChatView = ({ onSend = () => {}, onUpload = () => {} }) => {\n  const [value, setValue] = useState('');\n  const ref = useRef();\n  const [file, setFile] = useState();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const reader = new FileReader();\n\n    reader.onloadend = e => {\n      onUpload(e.target.result);\n      setFile(null);\n    };\n\n    reader.readAsDataURL(file);\n    // eslint-disable-next-line\n  }, [file]);\n\n  return (\n    <Container>\n      <TextArea\n        placeholder=\"Enter a Message\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n\n      <input\n        style={{ display: 'none' }}\n        ref={ref}\n        type=\"file\"\n        onChange={e => setFile(e.target.files[0])}\n      />\n\n      <Right>\n        <Button\n          className=\"blue\"\n          onClick={() => {\n            ref.current.click();\n          }}\n        >\n          <img src={imgImage} alt=\"⬆\" />\n        </Button>\n\n        <Button\n          onClick={() => {\n            onSend(value);\n            setValue('');\n          }}\n        >\n          Send\n        </Button>\n      </Right>\n    </Container>\n  );\n};\n\nexport default ChatView;\n","import React, {useReducer} from 'react';\n\nexport const MessagesContext = React.createContext({\n  messages: [],\n  publish: () => {},\n});\n\nexport const MessagesProvider = ({children}) => {\n  // https://reactjs.org/docs/context.html#caveats\n  const [value, dispatch] = useReducer(\n    (state, action) => {\n      switch (action.type) {\n        case 'NEW_MESSAGE':\n          const newState = {\n            ...state,\n            messages: state.messages\n              .concat([\n                {\n                  ...action.payload,\n                  timestamp: new Date(),\n                },\n              ])\n              .sort((a, b) => a.timestamp - b.timestamp),\n          };\n\n          console.debug('NEW STATE:', newState);\n          return newState;\n        default:\n          return {...state};\n      }\n    },\n    {\n      messages: [\n        {\n          name: 'Skeeter',\n          msg: 'Nisi occaecat voluptate excepteur culpa duis.',\n          timestamp: new Date(),\n          type: 'text',\n        },\n        {\n          name: 'Skeeter',\n          msg:\n            'Culpa eiusmod sit minim aute cillum ex proident culpa eu aliquip anim duis.',\n          timestamp: new Date(),\n          type: 'text',\n        },\n        {\n          name: 'Bubba',\n          msg:\n            'Culpa et dolor nisi mollit ea eiusmod minim culpa velit.\\nAd enim voluptate est labore exercitation voluptate irure incididunt commodo veniam commodo magna.',\n          timestamp: new Date(),\n          type: 'text',\n        },\n      ],\n      publish: (name, msg, type = 'text') => {\n        dispatch({type: 'NEW_MESSAGE', payload: {name, msg, type}});\n      },\n    },\n  );\n\n  return (\n    <MessagesContext.Provider value={value}>\n      {children}\n    </MessagesContext.Provider>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport moment from 'moment';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 100%;\n  margin-bottom: 22px;\n\n  &.right {\n    align-items: flex-end;\n  }\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const Time = styled.div`\n  font-size: 0.8em;\n  font-style: italic;\n  line-height: 1.61;\n  color: #a2a2a2;\n  margin-bottom: 8px;\n`;\n\nexport const Name = styled.div`\n  font-weight: bold;\n  line-height: 1.61;\n`;\n\nconst Msg = styled.div`\n  color: black;\n  background-color: #00bcd4;\n  width: auto;\n  max-width: 60%;\n  padding: 12px;\n  box-sizing: border-box;\n  border-radius: 6px;\n  font-size: 1em;\n  line-height: 1.61;\n\n  &.is-sender {\n    background-color: #6ef173;\n  }\n`;\n\nconst Line = styled.div`\n  margin-bottom: 8px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst Message = ({ message, isSender }) => {\n  return (\n    <Container className={isSender ? 'right' : ''}>\n      <Name>{message.name}</Name>\n\n      <Time>{moment(message.timstamp).format('LT')}</Time>\n\n      <Msg className={isSender ? 'is-sender' : ''}>\n        {message.msg.split(/\\n/).map(m => (\n          <Line>{m}</Line>\n        ))}\n      </Msg>\n    </Container>\n  );\n};\n\nexport default Message;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport moment from 'moment';\nimport { Container, Name, Time } from './Message';\n\nconst Img = styled.img`\n  width: auto;\n  max-width: 60%;\n  border-radius: 6px;\n`;\n\nconst Image = ({ message, isSender }) => {\n  return (\n    <Container className={isSender ? 'right' : ''}>\n      <Name>{message.name}</Name>\n\n      <Time>{moment(message.timstamp).format('LT')}</Time>\n\n      <Img className={isSender ? 'is-sender' : ''} src={message.msg} alt=\"\" />\n    </Container>\n  );\n};\n\nexport default Image;\n","import React, { useContext, useRef, useEffect } from 'react';\nimport styled from 'styled-components/macro';\nimport { MessagesContext } from '../contexts/messages';\nimport Message from './Message';\nimport Image from './Image';\n\nconst Container = styled.div`\n  flex: 1 1 100px;\n  padding: 24px;\n  box-sizing: border-box;\n  overflow-y: auto;\n  border: 1px solid white;\n  border-radius: 6px;\n  border: 1px solid #499c4d;\n`;\n\nconst MessagesView = ({ who }) => {\n  const { messages } = useContext(MessagesContext);\n  const ref = useRef();\n\n  /**\n   * Scroll to the bottom when the messages update\n   */\n  useEffect(() => {\n    ref.current.scrollTo(0, ref.current.scrollHeight);\n  }, [messages]);\n\n  return (\n    <Container ref={ref}>\n      {messages.map((msg, idx) => {\n        switch (msg.type) {\n          case 'image':\n            return <Image isSender={msg.name === who} message={msg} />;\n          default:\n            return (\n              <Message key={idx} isSender={msg.name === who} message={msg} />\n            );\n        }\n      })}\n    </Container>\n  );\n};\n\nexport default MessagesView;\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\nconst Container = styled.div`\n  display: flex;\n  padding-bottom: 16px;\n  box-sizing: border-box;\n  align-items: baseline;\n  justify-content: flex-end;\n`;\n\nconst Input = styled.input`\n  line-height: 1.61em;\n  border: 1px solid #499c4d;\n  border-radius: 6px;\n  padding: 6px;\n  background-color: black;\n  color: #6ef173;\n  font-weight: bold;\n  font-size: 16px;\n  outline: none;\n\n  &::placeholder {\n    font-style: italic;\n    color: #316734;\n    font-weight: normal;\n  }\n`;\n\nconst Label = styled.div`\n  color: #4da250;\n  margin-right: 12px;\n  font-size: 12px;\n`;\n\nconst TextInput = ({ label, value, onChange = () => {} }) => {\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <Input placeholder=\"Enter a name\" value={value} onChange={onChange} />\n    </Container>\n  );\n};\n\nexport default TextInput;\n","import React, { useState, useContext } from 'react';\nimport MessageInput from './MessageInput';\nimport MessagesView from './MessagesView';\nimport styled from 'styled-components/macro';\nimport { MessagesContext } from '../contexts/messages';\nimport TextInput from './TextInput';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 100px;\n  height: 100%;\n  padding: 28px;\n  box-sizing: border-box;\n\n  &:first-child {\n    border-right: 4px solid #002f35;\n  }\n`;\n\nconst ChatView = ({ name = '' }) => {\n  const [displayName, setDisplayName] = useState(name);\n\n  const { publish } = useContext(MessagesContext);\n\n  return (\n    <Container>\n      <TextInput\n        label=\"Name:\"\n        value={displayName}\n        onChange={e => setDisplayName(e.target.value)}\n      />\n\n      <MessagesView who={displayName} />\n\n      <MessageInput\n        onSend={val => publish(displayName, val)}\n        onUpload={dataUrl => publish(displayName, dataUrl, 'image')}\n      />\n    </Container>\n  );\n};\n\nexport default ChatView;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport ChatView from './ChatView';\nimport { MessagesProvider } from '../contexts/messages';\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n`;\n\nconst DualChatView = () => {\n  return (\n    <Container>\n      <MessagesProvider>\n        <ChatView name=\"Skeeter\" />\n        <ChatView name=\"Bubba\" />\n      </MessagesProvider>\n    </Container>\n  );\n};\n\nexport default DualChatView;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport GlobalStyle from './GlobalStyle';\nimport DualChatView from './components/DualChatView';\n\nconst Canvas = styled.div`\n  width: 100vw;\n  height: 100vh;\n  color: white;\n  background-color: black;\n  overflow: auto;\n`;\n\nconst App = () => (\n  <React.Fragment>\n    <GlobalStyle />\n\n    <Canvas>\n      <DualChatView />\n    </Canvas>\n  </React.Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}